BIN2REM Version 2.1  (Jan 20, 2008)

Freeware by Paolo Ferraris (pieffe8_at_libero.it)

The program comes with no guarantees of any kind.


INTRODUCTION

BIN2REM is a program that generates a TAP file from a ZX-spectrum
machine-code program, in such a way that the code is automatically
executed (in a Spectrum emulator) when loaded with LOAD "" or from
the 128k menu.

BIN2REM has been developed especially to help Spectrum programmers to
compete in the minigame competition

http://www.ffd2.com/minigame
http://minigamecomp.org.uk

For this reason, the goal of BIN2REM is to produce a TAP file that is as
small as possible.

With a minimal knowledge on how BIN2REM works and no particular effort,
it is possible to have a BASIC overhead of only 11 bytes. For people who
are more expert in Spectrum programming, BIN2REM gives a lot of flexibility
with a BASIC overhead of 7 bytes or less.


MAIN SYNTAX

The syntax is

> bin2rem [options] inputfile outputfile filename

'inputfile' is the name of the file that contains the machine-code program to
be inserted into the TAP file.

'outputfile' is the name of the TAP file. The TAP extension is not added
automatically.

'filename' (max 10 characters, no spaces) is the name of the BASIC program
inside the TAP file, the name that appears after

  Program: 

during tape loading.


MAIN USAGE

The TAP file generated by BIN2REM contains a single BASIC program
autostarting at line 0, and without variables.
This is the schema of the BASIC block generated by BIN2REM

----------------------------------------------------------------------------
bytes | addresses | value        | comment
----------------------------------------------------------------------------
 1-2    23755-56    word 0         line number (most significant byte first)
 3-4    23757-58    word 0         line length (value is irrelevant)
 5-11   23759-65    BASIC command  equivalent to OVER USR 23766 (see below)
12-???  23766-???   input          copied from input file

The BASIC command is equivalent to OVER USR 23766, but shorter to save bytes.
More details are in the appendix. As the command is not terminated, if
the machine code program returns to BASIC then it will very likely generate
a syntax errow message.

The BASIC command can also be personalized. The address 23766 --- the
starting point of the machine program --- can be changed with option -j
(syntax: -j address).
Option -k (syntax: -k keyword , omit spaces in keywords such as GO TO)
allows to replace OVER with another BASIC keyword. For instance,
option -k PRINT makes the RST 8 instruction write on the top 22 lines of
the screen instead of the bottom 2. Option -k accepts any keyword that is
legal as the first keyword in a BASIC command (for instance, IF is allowed,
THEN is not), even if some keywords like CLS won't make the USR 23766 part
of the instruction execute.

Option -d also customizes the BASIC command above, but it is useful in very
limited cases. It is described in the appendix.


COMPATIBILITY MODE: OPTION -v1

In TAP files generated by version 1.0 of BIN2REM, the machine-code program
is put into memory starting from address 23769, and executed from that
address.

For compatibility with machine-code program created for version 1.0 of
BIN2REM, we can force this newer version of the software to generate the
same TAP file of version 1.0 by using option -v1.
No other command-line options are accepted with -v1.


ADVANCED OPTIONS

As we saw above, normally, the first 4 bytes of the BASIC block are 0.
With option -w their content comes from the input.
Here is the schema of the BASIC block:

---------------------------------------------------------------
bytes | addresses | value
---------------------------------------------------------------
 1-4    23755-58    bytes 1-4 of input (line number and length)
 5-11   23759-65    BASIC command equivalent to OVER USR 23766
12-???  23766-???   bytes 12-??? of input

In practice, the input file is the content of the BASIC block, except that
bytes 5-11 are replaced by the BASIC command. Bytes 1-4 can contain
any value, with the limitation that first byte must be <64. Otherwise, the
Spectrum ROM would see an empty program, and the code would be not
executable neither with autostart nor with RUN.

Bytes 1-4 of input can also contain code, for instance

LD A,N
JR +7   ; jump after the BASIC command.

If we don't use any JR/JP instruction there then bytes 5-11 --- that
contain the BASIC program --- are executed as machine code. The actual
instructions depend on which options among -j, -k and -d are used.
Please refer to the appendix and the source code for more details.
The default values of -k and -d are such that, if option -j 23755 is used
(that is, start execution from byte 1), the instructions corresponding to
the BASIC command are

SBC A,192
SCF
LD C,143
ADD HL,SP
SUB (HL)

These instructions are "nice" as the only change values of registers other
than B and DE.
Consequently, good instructions for the first 4 bytes are, for instance,

LD DE,NN
DI

or

LD HL,NN
EXX .


Option -w2 is similar to -w, except that no BASIC command is inserted
at positions 5-11. In this case, the input must contain the BASIC command
that starts the machine code. Clearly, options -j, -k and -d cannot be
used with option -w2. The same limitation on the first byte < 64 of option
-w applies to option -w2 as well.


VERSION HISTORY

Version 2.1 - Jan 2008
   The following changes are relative to options -w and -w2 only.
   - Now an error message is generated if the first byte of the
     BASIC block is >= 64, as the program would be nonrunnable.
   - If the first byte of the BASIC block is < 64 (line number < 16384)
     then the autostart line number in header block is set to 0. (Previously
     it happened only when the line number was < 10000.)

Version 2.0 - Jan 2008
   - Many options added, all those mentioned in this manual
   - From 3 to 7+ more bytes available for your program compared to version 1.0

Version 1.0 - Mar 2006
   - First release


ABOUT THE SOURCE CODE

The utility has been compiled under DJGPP, a GNU C++ compiler for DOS. It
works under Windows, and it has not been tested under real DOS. The source
code is available and easily compilable under any C++ compiler, especially
GNU C++. It can also easily adapted to work with plain C compilers.


Comments and suggestions are welcome.


APPENDIX - EXPLANATION OF THE BASIC COMMAND

Here is the BASIC command equivalent to OVER USR 23766 that BIN2REM
puts in the TAP file.

--------------------------------------------------------------------------
bytes | addresses | value                  | comment
--------------------------------------------------------------------------
  5      23759      OVER                     can be changed with option -k
  6      23760      USR
  7      23761      char '7'                 visible number,
                                             can be changed with option -d
  8      23762      byte 14                  FP number follows
 9-11   23763-65    23766 as a truncated
                    FP number (see below)    can be changed with option -j

A few comments about this BASIC command.

1) Number 23766 shows just as digit 7 in BASIC editor. Showing just a digit
   is a well-known "camouflaging" technique, and also saves memory.
   This digit can be changed with option -d (syntax: -d digit).
2) Bytes 9-11 form, with bytes 12-13 that come from the input, a floating
   point number that, when rounded, equals 23766. Every address specified
   with option -j can be represented this way, regardless of the content
   of the input. More details in the source code.
